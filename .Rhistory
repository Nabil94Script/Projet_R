shiny::runApp()
install.packages("shinydashboard")
install.packages("DT")
install.packages("ggtext")
install.packages("maps")
install.packages("ggcorrplot")
install.packages("shinycssloaders")
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
mydata
runApp()
runApp()
runApp()
runApp()
runApp()
mydata
runApp()
runApp()
shiny::runApp()
df1
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df
runApp()
runApp()
shiny::runApp()
library(data.table)
library(skimr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(plotly)
library(rAmCharts)
library(stringi)
library(scales)
library(zoo)
library(ggpubr)
library(TTR)
library(gridExtra) # to organise plots nicely
library(fpp2)
set.seed(104)
df=fread("N:/Echanges/Projets R/Time Series/temp_train.csv")
df=tibble(df)
c0 = df %>% select("equipement") %>% group_by(equipement) %>% slice(1)
c0
shiny::runApp()
shiny::runApp()
runApp()
runApp()
df=fread("N:/Echanges/Projets R/Time Series/temp_train.csv")
df=tibble(df)
c0 = df %>% select("equipement") %>% group_by(equipement) %>% slice(1)
c1 = df %>% select("Temp","debit") %>% names()
df=fread("N:/Echanges/Projets R/Time Series/temp_train.csv")
df=tibble(df)
c0 = df %>% select("equipement") %>% group_by(equipement) %>% slice(1)
c1 = df %>% select("Temp","debit") %>% names()
c1
c0
input
input$var0
input$var1
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
c0
runApp()
runApp()
c0 = mydata %>% select("equipement") %>% group_by(equipement) %>% slice(1) %>% names()
c0 = mydata %>% select("equipement") %>% group_by(equipement) %>% slice(1) %>% names()
c0
runApp()
runApp()
df %>% subset(equipement=="Baie_0001")
mydata
mydata %>% subset(equipement=='Baie0001')
mydata %>% subset(equipement=='Baie_0001')
mydata %>% subset(equipement=='Baie_0002')
runApp()
runApp()
input=tibble(var0=c('Baie_0001'))
input
input$var0
p1 = df %>% subset(equipement==~get(input$var0))
P1
p1
p1 = df %>% subset(equipement==get(input$var0))
p1 = df %>% subset(equipement==input$var0)
p1
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df
runApp()
df
df=fread("N:/Echanges/Projets R/Time Series/temp_train.csv")
df=tibble(df)
c0 = df %>% select("equipement") %>% group_by(equipement) %>% slice(1)
c0 = mydata %>% select("equipement") %>% group_by(equipement) %>% slice(1)
c1 = df %>% select("Temp","debit") %>% names()
df
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(df)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
library(data.table)
library(skimr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(plotly)
library(rAmCharts)
library(stringi)
library(scales)
library(zoo)
library(ggpubr)
library(TTR)
library(gridExtra) # to organise plots nicely
library(fpp2)
set.seed(104)
df=fread("N:/Echanges/Projets R/Time Series/temp_train.csv")
df=tibble(df)
df
df$Date=paste0(stringi::stri_sub(df$datetime, 7, 10),"-",stringi::stri_sub(df$datetime, 4, 5),"-",stringi::stri_sub(df$datetime, 1, 2))
df$DateC=as.POSIXct(df$Date)
df$Temp=gsub(c(","),".",as.character(df$T_mu))
df$Temp=as.numeric(df$Temp)
df$debit=gsub(c(","),".",as.character(df$debit_Ventulation))
df$debit=as.numeric(df$debit)
df2=df %>% subset(equipement=='Baie_0002')
df1=df %>% subset(equipement=='Baie_0001')
df3=df %>% subset(equipement=='Baie_0003')
df
View(df)
m=df %>% subset(equipement=='Baie_0001') %>% ggplot(aes(x=DateC, y=Temp)) + geom_line()
ggplotly(m)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df=tibble(df1)
seri33 = df %>% select(c("Temp","Date")) %>% drop_na()
df$Date=paste0(stringi::stri_sub(df$datetime, 7, 10),"-",stringi::stri_sub(df$datetime, 4, 5),"-",stringi::stri_sub(df$datetime, 1, 2))
df$DateC=as.POSIXct(df$Date)
df=fread("N:/Echanges/Projets R/Time Series/temp_train.csv")
df=tibble(df)
df$Date=paste0(stringi::stri_sub(df$datetime, 7, 10),"-",stringi::stri_sub(df$datetime, 4, 5),"-",stringi::stri_sub(df$datetime, 1, 2))
df$DateC=as.POSIXct(df$Date)
df$Temp=gsub(c(","),".",as.character(df$T_mu))
df$Temp=as.numeric(df$Temp)
df$debit=gsub(c(","),".",as.character(df$debit_Ventulation))
df$debit=as.numeric(df$debit)
df2=df %>% subset(equipement=='Baie_0002')
df1=df %>% subset(equipement=='Baie_0001')
df3=df %>% subset(equipement=='Baie_0003')
df=tibble(df1)
seri33 = df %>% select(c("Temp","Date")) %>% drop_na()
seri33$Date = ymd(seri33$Date)
library(modeltime)
library(tidymodels)
library(tidyverse)
library(lubridate)
library(timetk)
df=tibble(df1)
seri33 = df %>% select(c("Temp","Date")) %>% drop_na()
seri33$Date = ymd(seri33$Date)
df_split = initial_time_split(seri33, prop = 0.7) #IT SEEMS THAT THIS CREATES THE PROBLEM
model_fit_prophet = prophet_reg() %>% set_engine(engine = "prophet") %>% fit(Temp ~ Date, data = training(df_split))
calibration_prophet <- model_fit_prophet %>% modeltime_calibrate(new_data = testing(df_split))
calibration_prophet %>% modeltime_forecast(new_data = testing(df_split), actual_data = seri33) %>% plot_modeltime_forecast(.legend_max_width = 20, .interactive = interactive)
model_fit_prophet = prophet_reg() %>% set_engine(engine = "prophet") %>% fit(Temp ~ Date, data = training(df_split))
calibration_prophet = model_fit_prophet %>% modeltime_calibrate(new_data = testing(df_split))
calibration_prophet %>% modeltime_forecast(new_data = testing(df_split), actual_data = seri33) %>% plot_modeltime_forecast(.legend_max_width = 20, .interactive = interactive)
calibtotal= model_fit_prophet %>% modeltime_calibrate(new_data = testing(df_split))
refit_tbl <- calibtotal %>%
modeltime_refit(data = seri33)
refit_tbl %>%
modeltime_forecast(h = "3 years", actual_data = seri33) %>%
plot_modeltime_forecast(
.legend_max_width = 25, # For mobile screens
.interactive      = interactive
)
df=tibble(df2)
seri33 = df %>% select(c("Temp","Date")) %>% drop_na()
seri33$Date = ymd(seri33$Date)
df_split = initial_time_split(seri33, prop = 0.7) #IT SEEMS THAT THIS CREATES THE PROBLEM
model_fit_prophet = prophet_reg() %>% set_engine(engine = "prophet") %>% fit(Temp ~ Date, data = training(df_split))
calibration_prophet <- model_fit_prophet %>% modeltime_calibrate(new_data = testing(df_split))
calibration_prophet %>% modeltime_forecast(new_data = testing(df_split), actual_data = seri33) %>% plot_modeltime_forecast(.legend_max_width = 20, .interactive = interactive)
library(data.table)
library(skimr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(plotly)
library(rAmCharts)
library(stringi)
library(scales)
library(zoo)
library(ggpubr)
library(TTR)
library(gridExtra) # to organise plots nicely
library(fpp2)
set.seed(104)
df=fread("N:/Echanges/Projets R/Time Series/temp_train.csv")
df=tibble(df)
df$Date=paste0(stringi::stri_sub(df$datetime, 7, 10),"-",stringi::stri_sub(df$datetime, 4, 5),"-",stringi::stri_sub(df$datetime, 1, 2))
df$DateC=as.POSIXct(df$Date)
df$Temp=gsub(c(","),".",as.character(df$T_mu))
df$Temp=as.numeric(df$Temp)
df$debit=gsub(c(","),".",as.character(df$debit_Ventulation))
df$debit=as.numeric(df$debit)
df2=df %>% subset(equipement=='Baie_0002')
df1=df %>% subset(equipement=='Baie_0001')
df3=df %>% subset(equipement=='Baie_0003')
library(modeltime)
library(tidymodels)
library(tidyverse)
library(lubridate)
library(timetk)
df=tibble(df1)
seri33 = df %>% select(c("Temp","Date")) %>% drop_na()
seri33$Date = ymd(seri33$Date)
df_split = initial_time_split(seri33, prop = 0.7) #IT SEEMS THAT THIS CREATES THE PROBLEM
model_fit_prophet = prophet_reg() %>% set_engine(engine = "prophet") %>% fit(Temp ~ Date, data = training(df_split))
calibration_prophet = model_fit_prophet %>% modeltime_calibrate(new_data = testing(df_split))
calibration_prophet %>% modeltime_forecast(new_data = testing(df_split), actual_data = seri33) %>% plot_modeltime_forecast(.legend_max_width = 20, .interactive = interactive)
model_fit_prophet = prophet_reg() %>% set_engine(engine = "prophet") %>% fit(Temp ~ Date, data = training(df_split))
calibration_prophet = model_fit_prophet %>% modeltime_calibrate(new_data = testing(df_split))
calibration_prophet %>% modeltime_forecast(new_data = testing(df_split), actual_data = seri33) %>% plot_modeltime_forecast(.legend_max_width = 20, .interactive = interactive)
df=tibble(df3)
seri33 = df %>% select(c("Temp","Date")) %>% drop_na()
seri33$Date = ymd(seri33$Date)
df_split = initial_time_split(seri33, prop = 0.7) #IT SEEMS THAT THIS CREATES THE PROBLEM
model_fit_prophet = prophet_reg() %>% set_engine(engine = "prophet") %>% fit(Temp ~ Date, data = training(df_split))
calibration_prophet=model_fit_prophet %>% modeltime_calibrate(new_data = testing(df_split))
calibration_prophet %>% modeltime_forecast(new_data = testing(df_split), actual_data = seri33) %>% plot_modeltime_forecast(.legend_max_width = 20, .interactive = interactive)
model_fit_prophet = prophet_reg() %>% set_engine(engine = "prophet") %>% fit(Temp ~ Date, data = training(df_split))
calibration_prophet=model_fit_prophet %>% modeltime_calibrate(new_data = testing(df_split))
calibration_prophet %>% modeltime_forecast(new_data = testing(df_split), actual_data = seri33) %>% plot_modeltime_forecast(.legend_max_width = 20, interactive = interactive)
model_fit_prophet = prophet_reg() %>% set_engine(engine = "prophet") %>% fit(Temp ~ Date, data = training(df_split))
calibration_prophet=model_fit_prophet %>% modeltime_calibrate(new_data = testing(df_split))
calibration_prophet %>% modeltime_forecast(new_data = testing(df_split), actual_data = seri33) %>% plot_modeltime_forecast(.legend_max_width = 20,
.interactive = interactive)
df=tibble(df3)
seri33 = df %>% select(c("Temp","Date")) %>% drop_na()
seri33$Date = ymd(seri33$Date)
df_split = initial_time_split(seri33, prop = 0.7) #IT SEEMS THAT THIS CREATES THE PROBLEM
interactive=TRUE
model_fit_prophet = prophet_reg() %>% set_engine(engine = "prophet") %>% fit(Temp ~ Date, data = training(df_split))
calibration_prophet=model_fit_prophet %>% modeltime_calibrate(new_data = testing(df_split))
calibration_prophet %>% modeltime_forecast(new_data = testing(df_split), actual_data = seri33) %>% plot_modeltime_forecast(.legend_max_width = 20,
.interactive = interactive)
model_fit_prophet = prophet_reg() %>% set_engine(engine = "prophet") %>% fit(Temp ~ Date, data = training(df_split))
calibration_prophet=model_fit_prophet %>% modeltime_calibrate(new_data = testing(df_split))
calibration_prophet %>% modeltime_forecast(new_data = testing(df_split), actual_data = seri33) %>% plot_modeltime_forecast(.legend_max_width = 20,
.interactive = TRUE)
runApp()
runApp()
model_fit_prophet = prophet_reg() %>% set_engine(engine = "prophet") %>% fit(Temp ~ Date, data = training(df_split))
calibration_prophet=model_fit_prophet %>% modeltime_calibrate(new_data = testing(df_split))
p5=calibration_prophet %>% modeltime_forecast(new_data = testing(df_split), actual_data = seri33) %>% plot_modeltime_forecast(.legend_max_width = 20,
.interactive = TRUE)
ggplotly(p5)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
calibtotal= model_fit_prophet %>% modeltime_calibrate(new_data = testing(df_split))
refit_tbl <- calibtotal %>%
modeltime_refit(data = seri33)
refit_tbl %>%
modeltime_forecast(h = "3 months", actual_data = seri33) %>%
plot_modeltime_forecast(
.legend_max_width = 25, # For mobile screens
.interactive      = interactive
)
calibtotal= model_fit_prophet %>% modeltime_calibrate(new_data = testing(df_split))
refit_tbl <- calibtotal %>%
modeltime_refit(data = seri33)
refit_tbl %>%
modeltime_forecast(h = "3 months", actual_data = seri33) %>%
plot_modeltime_forecast(
.legend_max_width = 25, # For mobile screens
.interactive      = interactive
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df=fread("N:/Echanges/Projets R/Time Series/temp_train.csv")
df=tibble(df)
resum1=skim(df)
print("type de variables-table de test:")
table(resum1$skim_type)
df=fread("N:/Echanges/Projets R/Time Series/temp_train.csv")
df=tibble(df)
resum1=skim(df)
df=fread("N:/Echanges/Projets R/Time Series/temp_train.csv")
df=tibble(df)
skim(df)
runApp()
runApp()
runApp()
runApp()
